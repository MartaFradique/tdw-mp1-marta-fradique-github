name: Pipeline

on:
  push:
    branches:
      '**'
jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: install
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile
      

  validation:
    runs-on: ubuntu-latest
    needs: [install]
    steps:
      - uses: actions/checkout@v2
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - run: npx prettier --write .
      - run: npm run lint
      - run: npm run test
      

  build: 
    runs-on: ubuntu-latest 
    needs: [validation] 
    steps:
      - uses: actions/checkout@v2 
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - run: npm run build --if-present 
      - name: Store into cache 
        uses: actions/cache@v2 
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}




# jobs:
#   build:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [ 16.x]
#     steps:
#       - uses: actions/checkout@v3
#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v3
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: 'yarn'
#       - run: yarn install
#       - run: npx prettier --write .
#       - run: npm run lint
#       - run: npm run build --if-present
#       - name: Netlify Deploy
#         env:
#           NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
#           NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
#         run: netlify deploy --dir=out --prod